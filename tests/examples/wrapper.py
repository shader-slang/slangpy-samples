# SPDX-License-Identifier: Apache-2.0

import numpy
import slangpy
import sys
import os
import runpy
from typing import Union

# Set the slangpy logger to fatal level to avoid cluttering the output
slangpy.Logger.get().level = slangpy.LogLevel.fatal

# Set a random seed for reproducibility
numpy.random.seed(42)

# Dictionary to store numpy arrays generated by the script.
# For now use it to store images displayed with slangpy.tev.show
# and slangpy.tev.show_async.
data = {}


# Counter for naming images that are shown without a name.
tev_image_counter = 0


# Mock the slangpy.tev.show and slangpy.tev.show_async functions
# to redirect the images to a numpy array instead of displaying them.
def tev_show_override(
    bitmap_or_texture: Union[slangpy.Bitmap, slangpy.Texture],
    name: str = "",
    host: str = "127.0.0.1",
    port: int = 14158,
    max_retries: int = 3,
) -> bool:
    global tev_image_counter, data
    if isinstance(bitmap_or_texture, slangpy.Bitmap):
        image = numpy.array(bitmap_or_texture, copy=False)
    if isinstance(bitmap_or_texture, slangpy.Texture):
        image = bitmap_or_texture.to_numpy()
    if name == "":
        name = f"tev_image_{tev_image_counter}"
        tev_image_counter += 1
    data[name] = image
    return True


# Override the slangpy.tev.show and show_async functions
slangpy.tev.show = tev_show_override
slangpy.tev.show_async = tev_show_override

# Get expected arguments
if len(sys.argv) < 3:
    raise ValueError("Usage: wrapper.py <script_path> <data_path>")

script_path = sys.argv[1]
data_path = sys.argv[2]

# Run the wrapped script
sys.path.append(os.path.dirname(script_path))
sys.argv = [script_path]  # Clear the script name from sys.argv
runpy.run_path(script_path, run_name="__main__")

# Store the gathered data in a .npz file
if data != {}:
    numpy.savez(data_path, **data)
